/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicesGet200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesGet200ResponseInner{}

// ServicesGet200ResponseInner struct for ServicesGet200ResponseInner
type ServicesGet200ResponseInner struct {
	// The name of the service
	Name string `json:"name"`
	Status ServiceStatus `json:"status"`
	// The version that is enabled for this service (if any)
	EnabledVersion string `json:"enabled_version"`
}

type _ServicesGet200ResponseInner ServicesGet200ResponseInner

// NewServicesGet200ResponseInner instantiates a new ServicesGet200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesGet200ResponseInner(name string, status ServiceStatus, enabledVersion string) *ServicesGet200ResponseInner {
	this := ServicesGet200ResponseInner{}
	this.Name = name
	this.Status = status
	this.EnabledVersion = enabledVersion
	return &this
}

// NewServicesGet200ResponseInnerWithDefaults instantiates a new ServicesGet200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesGet200ResponseInnerWithDefaults() *ServicesGet200ResponseInner {
	this := ServicesGet200ResponseInner{}
	return &this
}

// GetName returns the Name field value
func (o *ServicesGet200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServicesGet200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServicesGet200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *ServicesGet200ResponseInner) GetStatus() ServiceStatus {
	if o == nil {
		var ret ServiceStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ServicesGet200ResponseInner) GetStatusOk() (*ServiceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ServicesGet200ResponseInner) SetStatus(v ServiceStatus) {
	o.Status = v
}

// GetEnabledVersion returns the EnabledVersion field value
func (o *ServicesGet200ResponseInner) GetEnabledVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnabledVersion
}

// GetEnabledVersionOk returns a tuple with the EnabledVersion field value
// and a boolean to check if the value has been set.
func (o *ServicesGet200ResponseInner) GetEnabledVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnabledVersion, true
}

// SetEnabledVersion sets field value
func (o *ServicesGet200ResponseInner) SetEnabledVersion(v string) {
	o.EnabledVersion = v
}

func (o ServicesGet200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesGet200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["enabled_version"] = o.EnabledVersion
	return toSerialize, nil
}

func (o *ServicesGet200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"enabled_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesGet200ResponseInner := _ServicesGet200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicesGet200ResponseInner)

	if err != nil {
		return err
	}

	*o = ServicesGet200ResponseInner(varServicesGet200ResponseInner)

	return err
}

type NullableServicesGet200ResponseInner struct {
	value *ServicesGet200ResponseInner
	isSet bool
}

func (v NullableServicesGet200ResponseInner) Get() *ServicesGet200ResponseInner {
	return v.value
}

func (v *NullableServicesGet200ResponseInner) Set(val *ServicesGet200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesGet200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesGet200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesGet200ResponseInner(val *ServicesGet200ResponseInner) *NullableServicesGet200ResponseInner {
	return &NullableServicesGet200ResponseInner{value: val, isSet: true}
}

func (v NullableServicesGet200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesGet200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


