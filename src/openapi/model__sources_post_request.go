/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourcesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourcesPostRequest{}

// SourcesPostRequest struct for SourcesPostRequest
type SourcesPostRequest struct {
	// The name of the source
	Name string `json:"name"`
	// The URL of the source (without scheme)
	Url string `json:"url"`
	// The version of the source
	Version string `json:"version"`
}

type _SourcesPostRequest SourcesPostRequest

// NewSourcesPostRequest instantiates a new SourcesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesPostRequest(name string, url string, version string) *SourcesPostRequest {
	this := SourcesPostRequest{}
	this.Name = name
	this.Url = url
	this.Version = version
	return &this
}

// NewSourcesPostRequestWithDefaults instantiates a new SourcesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesPostRequestWithDefaults() *SourcesPostRequest {
	this := SourcesPostRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SourcesPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SourcesPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SourcesPostRequest) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *SourcesPostRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SourcesPostRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SourcesPostRequest) SetUrl(v string) {
	o.Url = v
}

// GetVersion returns the Version field value
func (o *SourcesPostRequest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SourcesPostRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SourcesPostRequest) SetVersion(v string) {
	o.Version = v
}

func (o SourcesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourcesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *SourcesPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourcesPostRequest := _SourcesPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourcesPostRequest)

	if err != nil {
		return err
	}

	*o = SourcesPostRequest(varSourcesPostRequest)

	return err
}

type NullableSourcesPostRequest struct {
	value *SourcesPostRequest
	isSet bool
}

func (v NullableSourcesPostRequest) Get() *SourcesPostRequest {
	return v.value
}

func (v *NullableSourcesPostRequest) Set(val *SourcesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesPostRequest(val *SourcesPostRequest) *NullableSourcesPostRequest {
	return &NullableSourcesPostRequest{value: val, isSet: true}
}

func (v NullableSourcesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


