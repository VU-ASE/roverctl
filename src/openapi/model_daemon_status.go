/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DaemonStatus The status of the roverd process
type DaemonStatus string

// List of DaemonStatus
const (
	OPERATIONAL DaemonStatus = "operational"
	RECOVERABLE DaemonStatus = "recoverable"
	UNRECOVERABLE DaemonStatus = "unrecoverable"
)

// All allowed values of DaemonStatus enum
var AllowedDaemonStatusEnumValues = []DaemonStatus{
	"operational",
	"recoverable",
	"unrecoverable",
}

func (v *DaemonStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DaemonStatus(value)
	for _, existing := range AllowedDaemonStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DaemonStatus", value)
}

// NewDaemonStatusFromValue returns a pointer to a valid DaemonStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDaemonStatusFromValue(v string) (*DaemonStatus, error) {
	ev := DaemonStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DaemonStatus: valid values are %v", v, AllowedDaemonStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DaemonStatus) IsValid() bool {
	for _, existing := range AllowedDaemonStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DaemonStatus value
func (v DaemonStatus) Ptr() *DaemonStatus {
	return &v
}

type NullableDaemonStatus struct {
	value *DaemonStatus
	isSet bool
}

func (v NullableDaemonStatus) Get() *DaemonStatus {
	return v.value
}

func (v *NullableDaemonStatus) Set(val *DaemonStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDaemonStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDaemonStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaemonStatus(val *DaemonStatus) *NullableDaemonStatus {
	return &NullableDaemonStatus{value: val, isSet: true}
}

func (v NullableDaemonStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaemonStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

