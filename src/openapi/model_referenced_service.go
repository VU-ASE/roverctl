/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReferencedService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferencedService{}

// ReferencedService struct for ReferencedService
type ReferencedService struct {
	// Fully qualified download url.
	Url *string `json:"url,omitempty"`
}

// NewReferencedService instantiates a new ReferencedService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferencedService() *ReferencedService {
	this := ReferencedService{}
	return &this
}

// NewReferencedServiceWithDefaults instantiates a new ReferencedService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferencedServiceWithDefaults() *ReferencedService {
	this := ReferencedService{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ReferencedService) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferencedService) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ReferencedService) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ReferencedService) SetUrl(v string) {
	o.Url = &v
}

func (o ReferencedService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferencedService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableReferencedService struct {
	value *ReferencedService
	isSet bool
}

func (v NullableReferencedService) Get() *ReferencedService {
	return v.value
}

func (v *NullableReferencedService) Set(val *ReferencedService) {
	v.value = val
	v.isSet = true
}

func (v NullableReferencedService) IsSet() bool {
	return v.isSet
}

func (v *NullableReferencedService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferencedService(val *ReferencedService) *NullableReferencedService {
	return &NullableReferencedService{value: val, isSet: true}
}

func (v NullableReferencedService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferencedService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


