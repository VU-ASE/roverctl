/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UnmetServiceError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnmetServiceError{}

// UnmetServiceError UnmetServiceError
type UnmetServiceError struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NewUnmetServiceError instantiates a new UnmetServiceError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnmetServiceError() *UnmetServiceError {
	this := UnmetServiceError{}
	return &this
}

// NewUnmetServiceErrorWithDefaults instantiates a new UnmetServiceError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnmetServiceErrorWithDefaults() *UnmetServiceError {
	this := UnmetServiceError{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *UnmetServiceError) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnmetServiceError) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *UnmetServiceError) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *UnmetServiceError) SetSource(v string) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *UnmetServiceError) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnmetServiceError) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *UnmetServiceError) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *UnmetServiceError) SetTarget(v string) {
	o.Target = &v
}

func (o UnmetServiceError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnmetServiceError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullableUnmetServiceError struct {
	value *UnmetServiceError
	isSet bool
}

func (v NullableUnmetServiceError) Get() *UnmetServiceError {
	return v.value
}

func (v *NullableUnmetServiceError) Set(val *UnmetServiceError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnmetServiceError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnmetServiceError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnmetServiceError(val *UnmetServiceError) *NullableUnmetServiceError {
	return &NullableUnmetServiceError{value: val, isSet: true}
}

func (v NullableUnmetServiceError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnmetServiceError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


