/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicesAuthorServiceVersionGet200ResponseInputsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesAuthorServiceVersionGet200ResponseInputsInner{}

// ServicesAuthorServiceVersionGet200ResponseInputsInner struct for ServicesAuthorServiceVersionGet200ResponseInputsInner
type ServicesAuthorServiceVersionGet200ResponseInputsInner struct {
	// The name of the service dependency
	Service string `json:"service"`
	// The streams of the service dependency
	Streams []string `json:"streams"`
}

type _ServicesAuthorServiceVersionGet200ResponseInputsInner ServicesAuthorServiceVersionGet200ResponseInputsInner

// NewServicesAuthorServiceVersionGet200ResponseInputsInner instantiates a new ServicesAuthorServiceVersionGet200ResponseInputsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesAuthorServiceVersionGet200ResponseInputsInner(service string, streams []string) *ServicesAuthorServiceVersionGet200ResponseInputsInner {
	this := ServicesAuthorServiceVersionGet200ResponseInputsInner{}
	this.Service = service
	this.Streams = streams
	return &this
}

// NewServicesAuthorServiceVersionGet200ResponseInputsInnerWithDefaults instantiates a new ServicesAuthorServiceVersionGet200ResponseInputsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesAuthorServiceVersionGet200ResponseInputsInnerWithDefaults() *ServicesAuthorServiceVersionGet200ResponseInputsInner {
	this := ServicesAuthorServiceVersionGet200ResponseInputsInner{}
	return &this
}

// GetService returns the Service field value
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) SetService(v string) {
	o.Service = v
}

// GetStreams returns the Streams field value
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) GetStreams() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value
// and a boolean to check if the value has been set.
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) GetStreamsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Streams, true
}

// SetStreams sets field value
func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) SetStreams(v []string) {
	o.Streams = v
}

func (o ServicesAuthorServiceVersionGet200ResponseInputsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesAuthorServiceVersionGet200ResponseInputsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service"] = o.Service
	toSerialize["streams"] = o.Streams
	return toSerialize, nil
}

func (o *ServicesAuthorServiceVersionGet200ResponseInputsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service",
		"streams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesAuthorServiceVersionGet200ResponseInputsInner := _ServicesAuthorServiceVersionGet200ResponseInputsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicesAuthorServiceVersionGet200ResponseInputsInner)

	if err != nil {
		return err
	}

	*o = ServicesAuthorServiceVersionGet200ResponseInputsInner(varServicesAuthorServiceVersionGet200ResponseInputsInner)

	return err
}

type NullableServicesAuthorServiceVersionGet200ResponseInputsInner struct {
	value *ServicesAuthorServiceVersionGet200ResponseInputsInner
	isSet bool
}

func (v NullableServicesAuthorServiceVersionGet200ResponseInputsInner) Get() *ServicesAuthorServiceVersionGet200ResponseInputsInner {
	return v.value
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseInputsInner) Set(val *ServicesAuthorServiceVersionGet200ResponseInputsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesAuthorServiceVersionGet200ResponseInputsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseInputsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesAuthorServiceVersionGet200ResponseInputsInner(val *ServicesAuthorServiceVersionGet200ResponseInputsInner) *NullableServicesAuthorServiceVersionGet200ResponseInputsInner {
	return &NullableServicesAuthorServiceVersionGet200ResponseInputsInner{value: val, isSet: true}
}

func (v NullableServicesAuthorServiceVersionGet200ResponseInputsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseInputsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


