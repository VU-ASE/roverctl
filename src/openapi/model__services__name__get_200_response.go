/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicesNameGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesNameGet200Response{}

// ServicesNameGet200Response struct for ServicesNameGet200Response
type ServicesNameGet200Response struct {
	// The name of the service
	Name string `json:"name"`
	Status ServiceStatus `json:"status"`
	Versions []string `json:"versions"`
	// The version that is enabled for this service (if any)
	EnabledVersion *string `json:"enabled_version,omitempty"`
}

type _ServicesNameGet200Response ServicesNameGet200Response

// NewServicesNameGet200Response instantiates a new ServicesNameGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesNameGet200Response(name string, status ServiceStatus, versions []string) *ServicesNameGet200Response {
	this := ServicesNameGet200Response{}
	this.Name = name
	this.Status = status
	this.Versions = versions
	return &this
}

// NewServicesNameGet200ResponseWithDefaults instantiates a new ServicesNameGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesNameGet200ResponseWithDefaults() *ServicesNameGet200Response {
	this := ServicesNameGet200Response{}
	return &this
}

// GetName returns the Name field value
func (o *ServicesNameGet200Response) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServicesNameGet200Response) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServicesNameGet200Response) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *ServicesNameGet200Response) GetStatus() ServiceStatus {
	if o == nil {
		var ret ServiceStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ServicesNameGet200Response) GetStatusOk() (*ServiceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ServicesNameGet200Response) SetStatus(v ServiceStatus) {
	o.Status = v
}

// GetVersions returns the Versions field value
func (o *ServicesNameGet200Response) GetVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *ServicesNameGet200Response) GetVersionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *ServicesNameGet200Response) SetVersions(v []string) {
	o.Versions = v
}

// GetEnabledVersion returns the EnabledVersion field value if set, zero value otherwise.
func (o *ServicesNameGet200Response) GetEnabledVersion() string {
	if o == nil || IsNil(o.EnabledVersion) {
		var ret string
		return ret
	}
	return *o.EnabledVersion
}

// GetEnabledVersionOk returns a tuple with the EnabledVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesNameGet200Response) GetEnabledVersionOk() (*string, bool) {
	if o == nil || IsNil(o.EnabledVersion) {
		return nil, false
	}
	return o.EnabledVersion, true
}

// HasEnabledVersion returns a boolean if a field has been set.
func (o *ServicesNameGet200Response) HasEnabledVersion() bool {
	if o != nil && !IsNil(o.EnabledVersion) {
		return true
	}

	return false
}

// SetEnabledVersion gets a reference to the given string and assigns it to the EnabledVersion field.
func (o *ServicesNameGet200Response) SetEnabledVersion(v string) {
	o.EnabledVersion = &v
}

func (o ServicesNameGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesNameGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["versions"] = o.Versions
	if !IsNil(o.EnabledVersion) {
		toSerialize["enabled_version"] = o.EnabledVersion
	}
	return toSerialize, nil
}

func (o *ServicesNameGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"versions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesNameGet200Response := _ServicesNameGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicesNameGet200Response)

	if err != nil {
		return err
	}

	*o = ServicesNameGet200Response(varServicesNameGet200Response)

	return err
}

type NullableServicesNameGet200Response struct {
	value *ServicesNameGet200Response
	isSet bool
}

func (v NullableServicesNameGet200Response) Get() *ServicesNameGet200Response {
	return v.value
}

func (v *NullableServicesNameGet200Response) Set(val *ServicesNameGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesNameGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesNameGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesNameGet200Response(val *ServicesNameGet200Response) *NullableServicesNameGet200Response {
	return &NullableServicesNameGet200Response{value: val, isSet: true}
}

func (v NullableServicesNameGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesNameGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


