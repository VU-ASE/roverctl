/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PipelinePost400Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelinePost400Response{}

// PipelinePost400Response struct for PipelinePost400Response
type PipelinePost400Response struct {
	// Additional information
	Message *string `json:"message,omitempty"`
	ValidationErrors PipelinePost400ResponseValidationErrors `json:"validation_errors"`
}

type _PipelinePost400Response PipelinePost400Response

// NewPipelinePost400Response instantiates a new PipelinePost400Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelinePost400Response(validationErrors PipelinePost400ResponseValidationErrors) *PipelinePost400Response {
	this := PipelinePost400Response{}
	this.ValidationErrors = validationErrors
	return &this
}

// NewPipelinePost400ResponseWithDefaults instantiates a new PipelinePost400Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelinePost400ResponseWithDefaults() *PipelinePost400Response {
	this := PipelinePost400Response{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PipelinePost400Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinePost400Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PipelinePost400Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PipelinePost400Response) SetMessage(v string) {
	o.Message = &v
}

// GetValidationErrors returns the ValidationErrors field value
func (o *PipelinePost400Response) GetValidationErrors() PipelinePost400ResponseValidationErrors {
	if o == nil {
		var ret PipelinePost400ResponseValidationErrors
		return ret
	}

	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value
// and a boolean to check if the value has been set.
func (o *PipelinePost400Response) GetValidationErrorsOk() (*PipelinePost400ResponseValidationErrors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationErrors, true
}

// SetValidationErrors sets field value
func (o *PipelinePost400Response) SetValidationErrors(v PipelinePost400ResponseValidationErrors) {
	o.ValidationErrors = v
}

func (o PipelinePost400Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelinePost400Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["validation_errors"] = o.ValidationErrors
	return toSerialize, nil
}

func (o *PipelinePost400Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"validation_errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPipelinePost400Response := _PipelinePost400Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPipelinePost400Response)

	if err != nil {
		return err
	}

	*o = PipelinePost400Response(varPipelinePost400Response)

	return err
}

type NullablePipelinePost400Response struct {
	value *PipelinePost400Response
	isSet bool
}

func (v NullablePipelinePost400Response) Get() *PipelinePost400Response {
	return v.value
}

func (v *NullablePipelinePost400Response) Set(val *PipelinePost400Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelinePost400Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelinePost400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelinePost400Response(val *PipelinePost400Response) *NullablePipelinePost400Response {
	return &NullablePipelinePost400Response{value: val, isSet: true}
}

func (v NullablePipelinePost400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelinePost400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


