/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatusGet200ResponseMemory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusGet200ResponseMemory{}

// StatusGet200ResponseMemory Memory usage information
type StatusGet200ResponseMemory struct {
	// The total amount of memory available on the rover in megabytes
	Total int32 `json:"total"`
	// The amount of memory used on the rover in megabytes
	Used int32 `json:"used"`
}

type _StatusGet200ResponseMemory StatusGet200ResponseMemory

// NewStatusGet200ResponseMemory instantiates a new StatusGet200ResponseMemory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusGet200ResponseMemory(total int32, used int32) *StatusGet200ResponseMemory {
	this := StatusGet200ResponseMemory{}
	this.Total = total
	this.Used = used
	return &this
}

// NewStatusGet200ResponseMemoryWithDefaults instantiates a new StatusGet200ResponseMemory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusGet200ResponseMemoryWithDefaults() *StatusGet200ResponseMemory {
	this := StatusGet200ResponseMemory{}
	return &this
}

// GetTotal returns the Total field value
func (o *StatusGet200ResponseMemory) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *StatusGet200ResponseMemory) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *StatusGet200ResponseMemory) SetTotal(v int32) {
	o.Total = v
}

// GetUsed returns the Used field value
func (o *StatusGet200ResponseMemory) GetUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *StatusGet200ResponseMemory) GetUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *StatusGet200ResponseMemory) SetUsed(v int32) {
	o.Used = v
}

func (o StatusGet200ResponseMemory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusGet200ResponseMemory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

func (o *StatusGet200ResponseMemory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusGet200ResponseMemory := _StatusGet200ResponseMemory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusGet200ResponseMemory)

	if err != nil {
		return err
	}

	*o = StatusGet200ResponseMemory(varStatusGet200ResponseMemory)

	return err
}

type NullableStatusGet200ResponseMemory struct {
	value *StatusGet200ResponseMemory
	isSet bool
}

func (v NullableStatusGet200ResponseMemory) Get() *StatusGet200ResponseMemory {
	return v.value
}

func (v *NullableStatusGet200ResponseMemory) Set(val *StatusGet200ResponseMemory) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusGet200ResponseMemory) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusGet200ResponseMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusGet200ResponseMemory(val *StatusGet200ResponseMemory) *NullableStatusGet200ResponseMemory {
	return &NullableStatusGet200ResponseMemory{value: val, isSet: true}
}

func (v NullableStatusGet200ResponseMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusGet200ResponseMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


