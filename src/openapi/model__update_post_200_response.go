/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatePost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePost200Response{}

// UpdatePost200Response struct for UpdatePost200Response
type UpdatePost200Response struct {
	// The version of the roverd daemon updated to
	Version string `json:"version"`
}

type _UpdatePost200Response UpdatePost200Response

// NewUpdatePost200Response instantiates a new UpdatePost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePost200Response(version string) *UpdatePost200Response {
	this := UpdatePost200Response{}
	this.Version = version
	return &this
}

// NewUpdatePost200ResponseWithDefaults instantiates a new UpdatePost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePost200ResponseWithDefaults() *UpdatePost200Response {
	this := UpdatePost200Response{}
	return &this
}

// GetVersion returns the Version field value
func (o *UpdatePost200Response) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UpdatePost200Response) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *UpdatePost200Response) SetVersion(v string) {
	o.Version = v
}

func (o UpdatePost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *UpdatePost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePost200Response := _UpdatePost200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePost200Response)

	if err != nil {
		return err
	}

	*o = UpdatePost200Response(varUpdatePost200Response)

	return err
}

type NullableUpdatePost200Response struct {
	value *UpdatePost200Response
	isSet bool
}

func (v NullableUpdatePost200Response) Get() *UpdatePost200Response {
	return v.value
}

func (v *NullableUpdatePost200Response) Set(val *UpdatePost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePost200Response(val *UpdatePost200Response) *NullableUpdatePost200Response {
	return &NullableUpdatePost200Response{value: val, isSet: true}
}

func (v NullableUpdatePost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


