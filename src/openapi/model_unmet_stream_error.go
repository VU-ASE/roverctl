/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UnmetStreamError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnmetStreamError{}

// UnmetStreamError UnmetStreamError
type UnmetStreamError struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
	Stream *string `json:"stream,omitempty"`
}

// NewUnmetStreamError instantiates a new UnmetStreamError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnmetStreamError() *UnmetStreamError {
	this := UnmetStreamError{}
	return &this
}

// NewUnmetStreamErrorWithDefaults instantiates a new UnmetStreamError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnmetStreamErrorWithDefaults() *UnmetStreamError {
	this := UnmetStreamError{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *UnmetStreamError) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnmetStreamError) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *UnmetStreamError) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *UnmetStreamError) SetSource(v string) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *UnmetStreamError) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnmetStreamError) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *UnmetStreamError) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *UnmetStreamError) SetTarget(v string) {
	o.Target = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *UnmetStreamError) GetStream() string {
	if o == nil || IsNil(o.Stream) {
		var ret string
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnmetStreamError) GetStreamOk() (*string, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *UnmetStreamError) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given string and assigns it to the Stream field.
func (o *UnmetStreamError) SetStream(v string) {
	o.Stream = &v
}

func (o UnmetStreamError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnmetStreamError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	return toSerialize, nil
}

type NullableUnmetStreamError struct {
	value *UnmetStreamError
	isSet bool
}

func (v NullableUnmetStreamError) Get() *UnmetStreamError {
	return v.value
}

func (v *NullableUnmetStreamError) Set(val *UnmetStreamError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnmetStreamError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnmetStreamError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnmetStreamError(val *UnmetStreamError) *NullableUnmetStreamError {
	return &NullableUnmetStreamError{value: val, isSet: true}
}

func (v NullableUnmetStreamError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnmetStreamError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


