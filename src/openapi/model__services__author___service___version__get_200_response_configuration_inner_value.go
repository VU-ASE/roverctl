/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue - The value of the configuration
type ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue struct {
	Float32 *float32
	String *string
}

// float32AsServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue is a convenience function that returns float32 wrapped in ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue
func Float32AsServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue(v *float32) ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue {
	return ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue{
		Float32: v,
	}
}

// stringAsServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue is a convenience function that returns string wrapped in ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue
func StringAsServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue(v *string) ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue {
	return ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue struct {
	value *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue
	isSet bool
}

func (v NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) Get() *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue {
	return v.value
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) Set(val *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue(val *ServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) *NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue {
	return &NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue{value: val, isSet: true}
}

func (v NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesAuthorServiceVersionGet200ResponseConfigurationInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


