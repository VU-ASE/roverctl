/*
roverd REST API

API exposed from each rover to allow process, service, source and file management

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourcesNamePost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourcesNamePost200Response{}

// SourcesNamePost200Response struct for SourcesNamePost200Response
type SourcesNamePost200Response struct {
	// The version of the just downloaded service
	Version *string `json:"version,omitempty"`
	// Whether or not this is the first time this service was downloaded
	New *bool `json:"new,omitempty"`
}

// NewSourcesNamePost200Response instantiates a new SourcesNamePost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesNamePost200Response() *SourcesNamePost200Response {
	this := SourcesNamePost200Response{}
	return &this
}

// NewSourcesNamePost200ResponseWithDefaults instantiates a new SourcesNamePost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesNamePost200ResponseWithDefaults() *SourcesNamePost200Response {
	this := SourcesNamePost200Response{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SourcesNamePost200Response) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesNamePost200Response) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SourcesNamePost200Response) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SourcesNamePost200Response) SetVersion(v string) {
	o.Version = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *SourcesNamePost200Response) GetNew() bool {
	if o == nil || IsNil(o.New) {
		var ret bool
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesNamePost200Response) GetNewOk() (*bool, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *SourcesNamePost200Response) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given bool and assigns it to the New field.
func (o *SourcesNamePost200Response) SetNew(v bool) {
	o.New = &v
}

func (o SourcesNamePost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourcesNamePost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	return toSerialize, nil
}

type NullableSourcesNamePost200Response struct {
	value *SourcesNamePost200Response
	isSet bool
}

func (v NullableSourcesNamePost200Response) Get() *SourcesNamePost200Response {
	return v.value
}

func (v *NullableSourcesNamePost200Response) Set(val *SourcesNamePost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesNamePost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesNamePost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesNamePost200Response(val *SourcesNamePost200Response) *NullableSourcesNamePost200Response {
	return &NullableSourcesNamePost200Response{value: val, isSet: true}
}

func (v NullableSourcesNamePost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesNamePost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


